const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// Supabase configuration
const supabaseUrl = 'http://localhost:54321';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function updateBothJobs() {
  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t c·∫£ 2 job postings...');
    
    // C·∫≠p nh·∫≠t Together Group SEO/SEM Specialist
    console.log('\nüìù C·∫≠p nh·∫≠t Together Group SEO/SEM Specialist...');
    
    // X√≥a job c≈©
    const { error: deleteError1 } = await supabase
      .from('jobs')
      .delete()
      .eq('title', 'SEO/SEM Specialist')
      .eq('company', 'Together Group');
    
    if (deleteError1) {
      console.error('‚ùå L·ªói khi x√≥a job Together Group c≈©:', deleteError1.message);
    } else {
      console.log('‚úÖ ƒê√£ x√≥a job Together Group c≈©');
    }
    
    // ƒê·ªçc v√† post job m·ªõi
    const togetherGroupData = JSON.parse(fs.readFileSync('Jobs Listing/TogetherGroup_SEO_SEM_Specialist.json', 'utf8'));
    
    const togetherGroupJob = {
      title: togetherGroupData.title,
      company: togetherGroupData.company,
      location: togetherGroupData.location,
      type: togetherGroupData.type.toLowerCase().replace(' ', '-'),
      work_model: togetherGroupData.work_model,
      salary_min: togetherGroupData.salary_min,
      salary_max: togetherGroupData.salary_max,
      description: togetherGroupData.description,
      is_verified: togetherGroupData.verified || false,
      is_active: true,
      level: togetherGroupData.level || 'Mid Level'
    };
    
    const { error: insertError1 } = await supabase
      .from('jobs')
      .insert(togetherGroupJob)
      .select()
      .single();
    
    if (insertError1) {
      console.error('‚ùå L·ªói khi post job Together Group m·ªõi:', insertError1.message);
    } else {
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng: SEO/SEM Specialist t·∫°i Together Group');
    }
    
    // C·∫≠p nh·∫≠t Mekanism PPC Specialist
    console.log('\nüìù C·∫≠p nh·∫≠t Mekanism PPC Specialist...');
    
    // X√≥a job c≈©
    const { error: deleteError2 } = await supabase
      .from('jobs')
      .delete()
      .eq('title', 'Pay-Per-Click Specialist (PPC Specialist)')
      .eq('company', 'Mekanism PPC India');
    
    if (deleteError2) {
      console.error('‚ùå L·ªói khi x√≥a job Mekanism c≈©:', deleteError2.message);
    } else {
      console.log('‚úÖ ƒê√£ x√≥a job Mekanism c≈©');
    }
    
    // ƒê·ªçc v√† post job m·ªõi
    const mekanismData = JSON.parse(fs.readFileSync('Jobs Listing/Mekanism_PPC_Specialist.json', 'utf8'));
    
    const mekanismJob = {
      title: mekanismData.title,
      company: mekanismData.company,
      location: mekanismData.location,
      type: mekanismData.type.toLowerCase().replace(' ', '-'),
      work_model: mekanismData.work_model,
      salary_min: mekanismData.salary_min,
      salary_max: mekanismData.salary_max,
      description: mekanismData.description,
      is_verified: mekanismData.verified || false,
      is_active: true,
      level: mekanismData.level || 'Mid Level'
    };
    
    const { error: insertError2 } = await supabase
      .from('jobs')
      .insert(mekanismJob)
      .select()
      .single();
    
    if (insertError2) {
      console.error('‚ùå L·ªói khi post job Mekanism m·ªõi:', insertError2.message);
    } else {
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng: Pay-Per-Click Specialist t·∫°i Mekanism PPC India');
    }
    
    console.log('\nüéâ Ho√†n th√†nh c·∫≠p nh·∫≠t c·∫£ 2 job postings!');
    console.log('üìù Nh·ªØng thay ƒë·ªïi ƒë√£ th·ª±c hi·ªán:');
    console.log('   - B·ªè ph·∫ßn requirements v√† benefits ·ªü cu·ªëi file JSON');
    console.log('   - Gi·ªØ l·∫°i n·ªôi dung ƒë·∫πp trong ph·∫ßn description');
    console.log('   - C·∫•u tr√∫c file g·ªçn g√†ng v√† chuy√™n nghi·ªáp h∆°n');
    
  } catch (error) {
    console.error('‚ùå L·ªói chung:', error.message);
  }
}

// Ch·∫°y script
updateBothJobs(); 